                      _      _       _    ______ _ _
                     | |    (_)     | |  |  ____(_) |
                     | |     _ _ __ | | _| |__   _| | ___
                     | |    | | '_ \| |/ /  __| | | |/ _ \
                     | |____| | | | |   <| |    | | |  __/
                     |______|_|_| |_|_|\_\_|    |_|_|\___| v0.7


LinkFile allows you to follow links to other files.

A link is an ASCII file of type &035 containing the path to the target file. An example is included in the archive. To use a link, make sure that !LinkFile has been seen by the filer, then double click/*Run/*Load the link.

v0.2 will also load URL files generated by ANT Internet suite and Internet Explorer. These have the file type &B28 and use the DOS file extension ".URL" or ".WEBSITE". ANT Internet suite URL files use the same format as links (an ASCII file with the URL in it). Internet Explorer URL files follow this basic format:

[InternetShortcut]
URL=http://www.example.com/

An example for both formats are included in the archive. Loading URL files require a web browser that supports the ANT URL protocol (like ArcWeb, Fresco or Oregano). Firefox requires the Firefox Integration extension. NetSurf and Oregano 2 only works if you run the URL file BEFORE running NetSurf/Oregano2, otherwise the URL file will be loaded directly into NetSurf/Oregano2, instead of through LinkFile, however Oregano 2 already supports Internet Explorer URLs. Firefox, Webster, WebsterXL and Webite are not supported.

v0.3 will load files created by Google Drive. When the offline client is installed on Windows or Mac OS X, it will download any files uploaded to Google Drive, but any files created using Google Docs will be represented by a file with a link to the online version which will be opened in a web browser. These files have the DOS extensions ".GDOC", ".GSLIDES", ".GSHEET", ".GDRAW" or ".GFORM", depending on what the file is online. On Risc OS, all of them use the extension &B28 (as with .URL files). The same browser restrictions apply to these files as they do to .URL files, except that they do not run natively in Oregano 2.
v0.3 will also support the AcornURI module, which fixes some problems in Phoenix where it will run !Phoenix again instead of opening the URL in an existing Phoenix session.

v0.4 supports links generated by LinkFS. LinkFS is a program similar to this one, however LinkFS treats the link as an image file system, which LinkFile doesn't do. However LinkFile supports linking to files and running URL files and Google Drive shortcuts. Links created by LinkFS have the file extension &FC0 and follow the same file format as links generated by LinkFile. LinkFS is written by Tom Hughes and is available from https://compton.nu/riscos/linkfs/
v0.4 will also allow you to use LinkFile from the command line. Syntax is:

*LinkFile <mode> <link> [<parameters>]

<mode> can be "-run" to run the target, "-load" to load the target, "-url" for loading URLs, "-dir" for LinkFS links or "-read" to set the target to Link$Target without running the target. <link> is the link you want to load. [<parameters>] is any parameters you want to pass to the target file.

v0.5 includes a program called ln to create links. It's similar to the Unix program of the same name. Syntax is
*ln <target> <link>
<target> is the file you want to link to. <link> is the name of the link you want to create. If the target is a file, it will create a link with the type &035. If the target is a folder, it will create a link with the type &FC0.
v0.5 also loads &1BA files. These are &B28 files retyped for use with IEURL to avoid the problems with Netsurf and Oregano 2 mentioned above. IEURL is another program similar to this one, but only supports Internet Explorer URLs typed &1BA. IEURL was written by Stuart Halliday and is available from http://quantumsoft.riscository.com/

v0.6 supports SymLinks (&1C8 files used in GCC)

v0.7 fixes a bug where if you run a link with parameters, if you run the link again without parameters, the parameters from last time will be used anyway.

By Cameron Cawley